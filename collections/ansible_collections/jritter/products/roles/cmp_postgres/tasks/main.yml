---
# tasks file for cmp_postgres

# We need a VM to deploy a DB on top of
- name: Set Random DB Name
  ansible.builtin.set_fact:
    cmp_postgres_dbname: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase'], length=8) }}"
    cmp_postgres_user: admin
    cmp_postgres_password: "{{ lookup('ansible.builtin.password', '/dev/null', chars=['ascii_lowercase'], length=8) }}"

- name: Make sure that inventory exists
  ansible.controller.inventory:
    name: Configuration Items
    description: Inventory that hosts all the Configuration Items
    organization: Default

- name: Add DB to Inventory
  ansible.controller.host:
    name: "{{ cmp_postgres_dbname }}"
    inventory: Configuration Items
    state: present
    variables:
      parent: "{{ parent_ci | default('n/a') }}"
      parent_ci_type: "{{ parent_ci_type | default('n/a') }}"
      cmp_vars: "{{ cmp_vars | default() }}"
      cmp_postgres_dbname: "{{ cmp_postgres_dbname }}"
      cmp_postgres_user: "{{ cmp_postgres_user }}"
      cmp_postgres_password: "{{ cmp_postgres_password }}"
      state: installing
  register: inventory_entry

- name: Make sure group exists
  ansible.controller.group:
    name: "{{ ci_type }}"
    inventory: Configuration Items
    state: present

- name: Add VM to respective inventory groups
  ansible.controller.group:
    name: "{{ ci_type }}"
    inventory: Configuration Items
    hosts:
      - "{{ cmp_postgres_dbname }}"
    state: present
    preserve_existing_hosts: True

- block:

  - name: Create VM for Database
    ansible.controller.job_launch:
      job_template: "Build VM Component"
      extra_vars:
        parent_ci: "{{ cmp_postgres_dbname }}"
        parent_ci_type: "{{ ci_type }}"
    register: job

  # In theory we could start multiple concurrent jobs here...
  - name: Wait for VM to be created
    ansible.controller.job_wait:
      job_id: "{{ job.id }}"
      timeout: 120

  - name: Fetch the VM from the job
    set_fact:
      cmp_postgres_hostname: "{{ lookup('ansible.controller.controller_api', 'jobs/' + job.id|string )['artifacts']['ci_name'] }}"

  - name: Creating DB...
    ansible.builtin.debug:
      msg: "Creating DB {{ cmp_postgres_dbname }} on VM {{ cmp_postgres_hostname }} with {{ cmp_vars.cmp_postgres_storage_size }} of storage"

  - name: Update Inventory
    ansible.controller.host:
      name: "{{ cmp_postgres_dbname }}"
      inventory: Configuration Items
      state: present
      variables:
        parent: "{{ parent_ci | default('n/a') }}"
        parent_ci_type: "{{ parent_ci_type | default('n/a') }}"
        cmp_vars: "{{ cmp_vars | default() }}"
        cmp_postgres_dbname: "{{ cmp_postgres_dbname }}"
        cmp_postgres_user: "{{ cmp_postgres_user }}"
        cmp_postgres_password: "{{ cmp_postgres_password }}"
        # Note how this was created during the process
        cmp_postgres_hostname: "{{ cmp_postgres_hostname }}"
        state: deployed

  - name: Return the created CI
    ansible.builtin.set_stats:
      data:
        ci_name: "{{ cmp_postgres_dbname }}"
        ci_id: "{{ inventory_entry.id }}"
  rescue:
  - name: Update Inventory
    ansible.controller.host:
      name: "{{ cmp_postgres_dbname }}"
      inventory: Configuration Items
      state: present
      variables:
        parent: "{{ parent_ci | default('n/a') }}"
        parent_ci_type: "{{ parent_ci_type | default('n/a') }}"
        cmp_vars: "{{ cmp_vars | default() }}"
        cmp_postgres_dbname: "{{ cmp_postgres_dbname }}"
        cmp_postgres_user: "{{ cmp_postgres_user }}"
        cmp_postgres_password: "{{ cmp_postgres_password }}"
        state: failed
        ansible_failed_task: "{{ ansible_failed_task }}"
        ansible_failed_result: "{{ ansible_failed_result }}"
        
  - name: Failing after rescue
    ansible.builtin.fail:
      msg: "{{ ansible_failed_result }}"